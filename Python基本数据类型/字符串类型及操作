1、字符串有 2类共4种 表示方法
    表示单行字符串：
        单引号：''
        双引号：""
    表示多行字符串：
        三单引号：''' ... '''
        包含关系：' " ', " ' ", ''' '..." '''
2、字符串切片高级用法：使用[M:N:K]根据步长对字符串切片
    <字符串>[M:N]，M 缺失表示至开头，N 缺失表示至结尾
        "1234506"[:3]  => "123"
    <字符串>[M:N:K]，根据步长 K 对字符串切片
        "0123456789"[1:8:2]  => "1357"
        "0123456789"[::-1]  => "9876543210"
3、字符串特殊字符：转义符\
    转义符\ 表达特定字符的本意
        \"  => "
    转义符形成一些组合，表达一些不可打印的含义
        \b => 回退
        \n => 换行（光标移动到下行首）
        \r => 回车（光标移动到本行首）
4、字符串操作符
    x + y  连接两个字符串
    n * x 或 x * n  复制n次字符串
    x in s  如果x 是s 的子串，返回True，否则返回False
5、字符串处理函数
    len(x) 返回字符串的长度
    str(x) 转为字符串类型
    hex(x) 或 oct(x) 整数x的十六进制或八进制小写形式字符串
    chr(u) u为Unicode编码，返回其对应的字符
    ord(x) x为字符，返回其对应的Unicode编码
6、Python字符串采用Unicode编码方式
7、字符串处理方法：<a>.<b>
    str.lower() 或 str.upper()
    str.split(sep=None) 返回一个列表，由str根据sep被分隔的部分组成
        "a,b,c".split(",") => ['a','b','c']
    str.count(sub)  返回子串sub在str中出现的次数
    str.replace(old,new) 字符串替换
    str.center(width[,fillchar])  字符串str根据宽度width居中，使用fillchar填充
    str.strip(chars) 从str中去掉在其左侧和右侧chars中列出的字符
        "= python= ".strip(" =np") => "ytho"
    str.join(iter) 在iter变量除最后元素外每个元素后增加一个str
        ",".join("12345") => "1,2,3,4,5" 主要用于字符串分隔
8、字符串类型的格式化
    <模板字符串>.format(<逗号分隔的参数>)
        "{1}:计算机{0}的CPU占用率{2}%".format("2018-10-10","c",10)
                                                0          1  2  
    槽内部对格式化的配置方式：{<参数序号>:<格式控制标记>}
        <填充> ：用于填充的单个字符
        <对齐> ：< 左对齐  > 右对齐  ^ 居中对齐
        <宽度> ：槽设定的输出宽度
            "{0:=^20}".format("PYTHON")
            '=======PYTHON======='
        <,>    ：数字千位分隔符
        <.精度>：浮点数小数精度 或 字符串最大输出长度
        <类型> ：整数类型-> b,c,d,o,x,X
                浮点数类型-> e,E,f,%
            "{0:,.2f}".format(12345.6789)
            '12,345.68'

