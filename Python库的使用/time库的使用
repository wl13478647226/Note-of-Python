1、time库概述
    import time
    time.<b>()
    time库包括三类函数
        时间获取：time() ctime() gmtime()
        时间格式化：strftime() strptime()
        程序计时：sleep() perf_counter()
2、时间获取
    time() 获取当前时间戳 返回浮点数
        time.time()  ->  1516939876.6022282
    ctime() 获取当前时间并以易读方式显示，返回字符串
        time.ctime()  ->  'Fri Jan 26 12:11:16 2018'
    gmtime() 获取当前时间，表示为计算机可以处理的时间格式
        time.gmtime()
        time.struct_time(tm_year=2018,tm_mon=1,tm_mday=26,tmhour=4,tm_minn=11,tm_sec=16,tm_wday=4,tm_yday=26,tm_isdst=0)
3、时间格式化
    strftime(tpl,ts)
        t=time.gmtime()
        time.strftime("%Y-%m-%d %H:%M:%S",t)
        结果：'2018-01-26 12:55:20'
    格式化控制符：
        格式化字符串    日期/时间说明          值范围和实例
            %Y          年份            0000~9999，例如：1900
            %m          月份            01~12，例如：10
            %B          月份名称         January~December，例如：April
            %b          月份名称缩写     Jan~Dec，例如：Apr
            %d          日期            01~31，例如：25
            %A          星期            Monday~Sunday，例如：Wednesday
            %a          星期缩写        Mon~Sun，例如：Wed
            %H          小时（24h制）       00~23，例如：12
            %h          小时（12h制）       01~12，例如：7
            %p          上/下午             AM, PM，例如：PM
            %M          分钟                00~59，例如：26
            %S          秒                  00~59，例如：26
    strptime(str,tpl)
        timeStr = '2018-01-26 12:55:20'
        time.strptime(timeStr, "%Y-%m-%d %H:%M:%S")
        结果：time.struct_time(tm_year=2018, tm_mon=1,
            tm_mday=26, tm_hour=4, tm_min=11, tm_sec=16,
            tm_wday=4, tm_yday=26, tm_isdst=0)
4、实例：文本进度条
    #TextProBarV1.py
    import time
    scale = 10
    print("------执行开始------")
    for i in range(scale+1):
        a = '*' * i
        b = '.' * (scale - i)
        c = (i/scale)*100
        print("{:^3.0f}%[{}->{}]".format(c,a,b))
        time.sleep(0.1)
    print("------执行结束------")

    单行动态刷新：\r 光标回到行首
        print("\r{:3}%".format(i), end="")

    完整效果
        #TextProBarV3.py
        import time
        scale = 50
        print("执行开始".center(scale//2, "-"))
        start = time.perf_counter()
        for i in range(scale+1):
            a = '*' * i
            b = '.' * (scale - i)
            c = (i/scale)*100
            dur = time.perf_counter() - start
            print("\r{:^3.0f}%[{}->{}]{:.2f}s".format(c,a,b,dur),end='')
            time.sleep(0.1)
        print("\n"+"执行结束".center(scale//2,'-'))