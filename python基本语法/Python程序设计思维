1、计算思维
    逻辑思维：推理和演绎，数学为代表，A->B B->C A->C
    实证思维：实验和验证，物理为代表，引力波<-实验
    计算思维：设计和构造，计算机为代表，汉诺塔递归

    计算思维：Computational Thinking
    抽象问题的计算过程，利用计算机自动化求解
    计算思维是基于计算机的思维方式

    抽象计算过程，关注设计和构造，而非因果
    以计算机程序设计为实现的主要手段
    编程是将计算思维变成现实的手段
2、计算生态
    没有顶层设计、以功能为单位、具备三个特点：
        竞争发展
        相互依存
        迅速更迭
    创新：跟随创新、集成创新、原始创新

    编程的起点不是算法而是系统
    编程如同搭积木，利用计算生态为主要模式
    编程的目标是快速解决问题
3、提高用户体验的方法
    方法1：进度展示
    方法2：异常处理
    其他类方法：打印输出、 日志文件、帮助信息
    用户体验是程序到产品的关键环节
4、基本的程序设计模式
    自顶向下设计：
        确定IPO：明确计算部分及功能边界
        编写程序：将计算求解的设计变成现实
        调试程序：确保程序按照正确逻辑能够正确运行
    模块化设计：
        通过函数或对象封装将程序划分为模块及模块间的表达
        具体包括：主程序、子程序和子程序间关系
        分而治之：一种分而治之、分层抽象、体系化的设计思想
        模块内部紧耦合、模块之间松耦合
    配置化设计：
        引擎+配置：程序执行和配置分离，将可选参数配置化
        将程序开发变成配置文件编写，扩展功能而不修改程序
        关键在于接口设计，清晰明了、灵活可扩展
    应用开发的四个步骤：从应用需求到软件产品
        1 产品定义：对应用需求充分理解和明确定义
            产品定义，而不仅是功能定义，要考虑商业模式
        2 系统架构：以系统方式思考产品的技术实现
            系统架构，关注数据流、模块化、体系架构
        3 设计与实现：结合架构完成关键设计及系统实现
            结合可扩展性、灵活性等进行设计优化
        4 用户体验：从用户角度思考应用效果
            用户至上，体验优先，以用户为中心
