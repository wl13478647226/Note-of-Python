1、文件
    文件定义：
        文件是数据的抽象和集合
        文件是存储在辅助存储器上的数据序列
        文件是数据存储的一种形式
        文件展现形态：文本文件和二进制文件
    文件理解：
        本质上，所有文件都是二进制形式存储
        形式上，所有文件采用两种方式展示
    文本文件：
        由单一特定编码组成的文件，如utf-8编码
        由于存在编码，也被看成是存储着的长字符串
        例如：.txt文件  .py文件
    二进制文件：
        直接由比特0和1组成，没有统一字符编码
        例如：.png文件  .avi文件
2、文件的打开与关闭
    文件处理的步骤：打开-操作-关闭
    文件的打开：
        <变量名>    =   open(<文件名>,          <打开模式>)
        文件句柄            文件路径和名称      文本 or 二进制
                        源文件同目录可省路径    读 or 写
    打开模式：
        'r' 只读模式，默认值，如果文件不存在，返回FileNotFoundError
        'w' 覆盖写模式，文件不存在则创建，存在则完全覆盖
        'x' 创建写模式，文件不存在则创建，存在则返回FileExistsError
        'a' 追加写模式，文件不存在则创建，存在则在文件最后追加内容
        'b' 二进制文件模式
        't' 文本文件模式，默认值
        '+' 与r/w/x/a一同使用，在原功能基础上增加同时读写功能
        f = open("f.txt")  默认为文本形式、只读模式
    文件关闭：
        <变量名>.close()
        文件句柄
    
    文件内容的读取
        <f>.read(size=-1)       读入全部内容，如果给出参数，读入前size长度
        <f>.readline(size=-1)   读入一行内容，如果给出参数，读入该行前size长度
        <f>.readlines(hint=-1)  读入文件所有行，以每行为元素形成列表
                                如果给出参数，读入前hint行
        一次读入，分行处理：
            fname = input("请输入要打开的文件名称:")
            fo = open(fname,"r")
            for line in fo.readlines():
                print(line)
            fo.close()
        分行读入，逐行处理：
            fname = input("请输入要打开的文件名称:")
            fo = open(fname,"r")
            for line in fo:
                print(line)
            fo.close()
    文件内容写入：
        <f>.write(s)    向文件写入一个字符串或字节流
        <f>.writelines(lines)   将一个元素全为字符串的列表写入文件
            >>>ls = ["中国", "法国", "美国"]
            >>>f.writelines(ls)
            中国法国美国
        <f>.seek(offset)    改变当前文件操作指针的位置，offset含义如下：
                            0 – 文件开头； 1 – 当前位置； 2 – 文件结尾
            fo = open("output.txt","w+")
            ls = ["中国", "法国", "美国"]
            fo.writelines(ls)
            for line in fo:
                print(line)
            fo.close()
                没有任何输出

            fo = open("output.txt","w+")
            ls = ["中国", "法国", "美国"]
            fo.writelines(ls)
            fo.seek(0)
            for line in fo:
                print(line)
            fo.close()
                中国法国美国

    datals.append(list(map(eval, line.split(","))))
3、理解方法思维
    自动化思维：数据与功能分离，数据驱动的自动运行
    接口化设计：格式化设计接口，清晰明了
    二维数据应用：应用维度组织数据，二维数据最常用
4、数据格式化
    将一组数据按照一定规格和样式进行规范：表示、存储、运算等
5、一维数据格式化和处理
    一维数据：由对等关系的有序或无序数据构成，采用线性方式组织
        对应列表、数组和集合等概念
    二维数据：由多个一维数据构成，是一维数据的组合形式
    多维数据
    高维数据：仅利用最基本的二元关系展示数据间的复杂结构
        {
            "firstName" : "Tian" ,
            "lastName" : "Song" ,
            "address" : {
                        "streetAddr" : "中关村南大街5号" ,
                        "city" : "北京市" ,
                        "zipcode" : "100081"
                        } ,
            "professional" : ["Computer Networking" , "Security"]
        }

    数据的操作周期：存储 <==> 表示 <==> 操作
                存储格式    数据类型    操作方式
        一维数据的表示：
            如果数据间有序：使用列表类型
                ls = [3.1398, 3.1349, 3.1376]
            如果数据间无序：使用集合类型
                st = {3.1398, 3.1349, 3.1376}
        一维数据的存储：
            方式一：空格分隔
                使用一个或多个空格分隔进行存储，不换行
                缺点：数据中不能存在空格
            方式二：逗号分隔
                使用英文半角逗号分隔数据进行存储，不换行
                缺点：数据中不能有英文逗号
        一维数据的处理：
            将存储的数据读入程序
            将程序表示的数据写入文件

            读入处理：
                从空格分隔的文件中读入数据：
                    txt = open(fname).read()
                    ls = txt.split()
                    f.close()
                从特殊符号分隔的文件中读入数据：
                    txt = open(fname).read()
                    ls = txt.split("$")
                    f.close()
            写入处理：
                采用空格分隔方式将数据写入文件：
                    ls = ['中国', '美国', '日本']
                    f = open(fname, 'w')
                    f.write(' '.join(ls))
                    f.close()
                采用特殊分隔方式将数据写入文件：
                    ls = ['中国', '美国', '日本']
                    f = open(fname, 'w')
                    f.write('$'.join(ls))
                    f.close()
6、二维数据格式化和处理
    表示：二维列表
        [ 
            [3.1398, 3.1349, 3.1376],
            [3.1413, 3.1404, 3.1401] 
        ]
    存储：CSV数据存储格式
        CSV: Comma-Separated Values
        国际通用的一二维数据存储格式，一般.csv扩展名
        每行一个一维数据，采用逗号分隔，无空行
        如果某个元素缺失，逗号仍要保留
        二维数据的表头可以作为数据存储，也可以另行存储
        逗号为英文半角逗号，逗号与数据之间无额外空格
    处理：
        读入：从CSV格式的文件中读入数据
            fo = open(fname)
            ls = []
            for line in fo:
                line = line.replace("\n","")
                ls.append(line.split(","))
            fo.close()
        写入：将数据写入CSV格式的文件
            ls = [[], [], []] #二维列表
            f = open(fname, 'w')
            for item in ls:
                f.write(','.join(item) + '\n')
            f.close()