1、集合类型及操作
    定义：
        集合是多个元素的无序组合
        集合元素之间无序，每个元素唯一，不存在相同元素
        集合元素不可更改，不能是可变数据类型
        集合用大括号{}表示，元素间用逗号分隔
        建立集合类型用{}或set(),建立空集合类型，必须使用set()
            A = {"python", 123, ("python",123)}
            B = set("pypy123")

    集合间操作：
        S | T   并
        S - T   差
        S & T   交
        S ^ T   补          返回集合
        S <= T 或 S < T     返回True/False  判断S和T的包含关系
        S >= T 或 S > T     返回True/False  判断S和T的包含关系
        S |= T 
        S -= T
        S &= T
        S ^= T  更新集合S
            A = {"p", "y" , 123}
            B = set("pypy123")
            A-B  =>   {123}
    
    集合处理方法
        S.add(x)    如果x不在集合S中，将x增加到S
        S.discard(x)    移除S中元素x，如果x不在集合S中，不报错
        S.remove(x)     移除S中元素x，如果x不在集合S中，产生KeyError异常
        S.clear()       移除S中所有元素
        S.pop()         随机返回S中的一个元素，更新S，若S为空产生KeyError异常
        S.copy()        返回集合S的一个副本
        len(S)          返回集合S的元素个数
        x in S          True/False
        x not in S      True/False
        set(x)          将其他类型变量x转变为集合类型

        >>> A = {"p", "y" , 123}
            try:
                while True:
                print(A.pop(), end=""))
            except:
                pass
        p123y
        >>> A
        set()

    集合类型应用场景：
        1、包含关系比较
            >>> "p" in {"p", "y" , 123}
            True
            >>> {"p", "y"} >= {"p", "y" , 123}
            False
        2、数据去重：集合类型所有元素无重复
            >>> ls = ["p", "p", "y", "y", 123]
            >>> s = set(ls) # 利用了集合无重复元素的特点
            {'p', 'y', 123}
            >>> lt = list(s) # 还可以将集合转换为列表
            ['p', 'y', 123]

2、序列类型及操作
    定义：
        序列是具有先后关系的一组元素
        序列是一维元素向量，元素类型可以不同
        元素间由序号引导，通过下标访问序列的特定元素
        序列是一个基类类型：字符串类型、元组类型、列表类型

    序列处理函数及方法：
        通用操作符：
            x in s 
            x not in s
            s + t           连接两个序列
            s*n 或 n*s      将序列s复制n次
            s[i]            索引，返回s中的第i个元素，i是序列的序号
            s[i: j] 或 s[i: j: k]  切片

        通用函数和方法：
            len(s)
            min(s)          s中的元素可比较
            max(s)          s中的元素可比较
            s.index(x)
            s.index(x,i,j)  返回序列s从i开始到j位置中第一次出现元素x的位置
            s.count(x)      返回序列s中出现x的总次数

                >>> s = "python123.io"
                >>> max(s)
                'y'
    
    元组类型：
        元组是序列类型的一种扩展，一旦创建就不能被修改
        使用()或tuple()创建，元素间用逗号分隔
        可以使用或不使用小括号
            def func():
                return 1,2
            >>> creature = "cat", "dog", "tiger", "human"
            >>> creature
            ('cat', 'dog', 'tiger', 'human')
            >>> color = (0x001100, "blue", creature)
            >>> color
            (4352, 'blue', ('cat', 'dog', 'tiger', 'human'))
        
        元组继承序列类型的全部通用操作，元组创建后不能修改，没有特殊操作
    
    列表类型及操作
        定义：
            列表是一种序列类型，创建后可以随意被修改
            使用方括号[]或list()创建，元素间用逗号分隔
            列表中各元素类型可以不同，无长度限制
        列表类型操作函数和方法：
            ls[i] = x           替换列表ls第i元素为x
            ls[i: j: k] = lt    用列表lt替换ls切片后所对应元素子列表
            del ls[i]           删除列表ls中第i元素
            del ls[i: j: k]     删除列表ls中第i到第j以k为步长的元素
            ls += lt            更新列表ls，将列表lt元素增加到列表ls中
            ls *= n             更新列表ls，其元素重复n次

            ls.append(x)        在列表ls最后增加一个元素x
            ls.clear()          删除列表ls中所有元素
            ls.copy()           生成一个新列表，赋值ls中所有元素
            ls.insert(i,x)      在列表ls的第i位置增加元素x
            ls.pop(i)           将列表ls中第i位置元素取出并删除该元素
            ls.remove(x)        将列表ls中出现的第一个元素x删除
            ls.reverse()        将列表ls中的元素反转
            sorted(ls)          将列表ls中的元素排序

    序列类型应用场景：
        元组用于元素不改变的应用场景，更多用于固定搭配场景
        列表更加灵活，主要作用：表示一组有序数据
        如果不希望数据被程序所改变，转换成元组类型
            >>> ls = ["cat", "dog", "tiger", 1024]
            >>> lt = tuple(ls)
            >>> lt
            ('cat', 'dog', 'tiger', 1024)

3、字典类型及操作
    定义：
        映射是一种键(索引)和值(数据)的对应
        键值对：键是数据索引的扩展
        字典是键值对的集合，键值对之间无序
        采用大括号{}和dict()创建，键值对用冒号表示
        {<键1>:<值1>, <键2>:<值2>, … , <键n>:<值n>}
        在字典变量中，通过键获得值
            <值> = <字典变量>[<键>]     <字典变量>[<键>] = <值>
            [ ] 用来向字典变量中索引或增加元素  
            d[key] 方式既可以索引，也可以赋值
        >>> de = {} ; type(de)
        <class 'dict'>
        type(x) 返回变量x的类型
    
    字典类型操作函数和方法
        del d[k]        删除字典d中键k对应的数据值
        k in d          判断键k是否在字典d中，如果在返回True，否则False
        d.keys()        返回字典d中所有的键信息
        d.values()      返回字典d中所有的值信息
        d.items()       返回字典d中所有的键值对信息
            >>> d = { "中国":"北京" , "美国":"华盛顿" , "法国":"巴黎" }
            >>> "中国" in d
            True
            >>> d.keys()
            dict_keys(['中国', '美国', '法国'])
            >>> d.values()
            dict_values(['北京', '华盛顿', '巴黎'])

        d.get(k,<default>)  键k存在，则返回相应值，不在则返回<default>值
        d.pop(k, <default>) 键k存在，则取出相应值，不在则返回<default>值
        d.popitem()         随机从字典d中取出一个键值对，以元组形式返回
        d.clear()           删除所有的键值对
        len(d)              返回字典d中元素的个数

    字典类型应用场景：
        例如：统计数据出现的次数，数据是键，次数是值

        items.sort(key=lambda x:x[1], reverse=True)