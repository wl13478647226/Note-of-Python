1、函数的定义和使用
    函数是一段代码的表示
    函数是一段具有特定功能的、可重用的语句组
    函数是一种功能的抽象，一般函数表达特定功能
    两个作用：降低编程难度，代码复用
    def <函数名>(<参数（0个或多个）>):
        <函数体>
        return <返回值>
    <函数名>(<参数>)
    函数定以后，如果不经过调用，不会被执行
    函数定义时，参数时输入、函数体是处理，结果是输出（IPO）

2、函数的参数传递
    函数可以有参数，也可以没有，但必须保留括号
    函数定义时可以为某些参数指定默认值，构成可选参数
        def <函数名>(<非可选参数>,<可选参数>):
        <函数体>
        return <返回值>

        def fact(n,m=1):
            s=1
            ...
        fact(10)
        fact(10,5)

    函数定义时可以设计可变数量参数，既不确定参数总数量
        def <函数名>(<非可选参数>,*b):
        <函数体>
        return <返回值>

        def fact(n,*b):
            s=1
            ...
        fact(10)
        fact(10,3,6,5)

    函数定义时，参数可以按照位置或名称方式传递
        def fact(n,m=1):
            s=1
            ...
        fact(10,5)      位置传递
        fact(m=10,n=10) 名称传递

3、函数的返回值
    return可以返回0个返回值，也可以返回多个返回值
    return可以有，可以没有
        def fact(n, m=1) :
            s = 1
            for i in range(1, n+1):
            s *= i
            return s//m, n, m
        fact( 10,5 )     (725760, 10, 5)
        a,b,c = fact(10,5)
        print(a,b,c)      725760 10 5
4、局部变量和全局变量
    规则1：局部变量和全局变量是不同变量
        局部变量是函数内部的占位符，与全局变量可能重名但不同
        函数运算结束后，局部变量被释放
        可以使用global保留字在函数内部使用全局变量
            n, s = 10, 100
            def fact(n) :
                global s
                for i in range(1, n+1):
                    s *= i
                return s
            print(fact(n), s)  362880000 362880000

    规则2：局部变量为组合数据类型且未创建，等同于全局变量
        ls = ["F", "f"]
        def func(a) :
            ls.append(a)
            return
        func("C")
        print(ls)   ['F', 'f', 'C']

        ls = ["F", "f"]
        def func(a) :
            ls = []
            ls.append(a)
            return
        func("C")
        print(ls)   ['F', 'f']

    局部变量和全局变量使用规则
        基本数据类型，无论是否重名，局部变量和全局变量不同
        可以通过global保留字在函数内部声明全局变量
        组合数据类型，如果局部变量未真实创建，则是全局变量
5、lambda函数
    lambda函数是一种匿名函数，即没有名字的函数
    使用lambda保留字定义，函数名是返回结果
    lambda函数用于定义简单的、能够在一行内表示的函数

        <函数名> = lambda <参数>：<表达式>
            f = lambda x, y : x + y
            print(f(10,15))  25
    lambda函数谨慎使用：
        lambda函数主要用作一些特定函数或方法的参数
        lambda函数有一些固定使用方法，建议逐步掌握
        一般情况，建议使用def定义普通函数
6、理解方法思维
    1、模块化思维：确定模块接口，封装功能
    2、规则化思维：抽象过程为规则，计算机自动执行
    3、化繁为简：将大功能变为小功能组合，分而治之

7、代码复用和模块化设计
    代码复用：把代码当成资源进行抽象
        代码资源化
        代码抽象化
        代码复用
    函数和对象是代码复用的两种主要形式
        函数：将代码命名
            在代码层面建立初步抽象
        对象：属性和方法
            a.b  和 a.b()
            在函数之上再次组织进行抽象
    模块化设计：分而治之
        通过函数或对象封装将程序划分为模块及模块间表达
        具体包括：主程序、子程序和子程序间关系
        分而治之：一种分而治之、分层抽象、体系化的设计思想
        模块内部紧耦合，模块之间松耦合
8、函数递归
    函数定义中调用函数自身的方式
    两个关键特征：
        链条：计算过程存在递归链条
        基例：存在一个或多个不需要再次递归的基例

    def fact(n):
        if n == 0:
            return 1
        else :
            return n*fact(n-1)

    递归的实现：函数 + 分支语句
        递归本身是一个函数，需要函数定义方式描述
        函数内部，采用分支语句对输入参数进行判断
        基例和链条，分别编写对应代码

    字符串反转：
        def rvs(s):
            if s == "" :
                return s
            else :
                return rvs(s[1:])+s[0]
    斐波那契数列：
        def f(n):
            if n == 1 or n == 2 :
                return 1
            else :
                return f(n-1) + f(n-2)
    汉诺塔：
        count = 0
        def hanoi(n, src, dst, mid):
            global count
            if n == 1 :
                print("{}:{}->{}".format(1,src,dst))
                count += 1
            else :
                hanoi(n-1, src, mid, dst)
                print("{}:{}->{}".format(n,src,dst))
                count += 1
                hanoi(n-1, mid, dst, src)